// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/apm-dev/evm-tx-parser/src/domain"
	mock "github.com/stretchr/testify/mock"
)

// Parser is an autogenerated mock type for the Parser type
type Parser struct {
	mock.Mock
}

// GetCurrentBlock provides a mock function with given fields:
func (_m *Parser) GetCurrentBlock() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetTransactions provides a mock function with given fields: address
func (_m *Parser) GetTransactions(address string) []domain.Transaction {
	ret := _m.Called(address)

	var r0 []domain.Transaction
	if rf, ok := ret.Get(0).(func(string) []domain.Transaction); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Transaction)
		}
	}

	return r0
}

// Start provides a mock function with given fields: ctx
func (_m *Parser) Start(ctx context.Context) {
	_m.Called(ctx)
}

// Subscribe provides a mock function with given fields: address
func (_m *Parser) Subscribe(address string) bool {
	ret := _m.Called(address)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewParser interface {
	mock.TestingT
	Cleanup(func())
}

// NewParser creates a new instance of Parser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewParser(t mockConstructorTestingTNewParser) *Parser {
	mock := &Parser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
