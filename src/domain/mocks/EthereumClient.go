// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/apm-dev/evm-tx-parser/src/domain"
	mock "github.com/stretchr/testify/mock"
)

// EthereumClient is an autogenerated mock type for the EthereumClient type
type EthereumClient struct {
	mock.Mock
}

// GetBlocksByRange provides a mock function with given fields: from, to
func (_m *EthereumClient) GetBlocksByRange(from int, to int) ([]domain.Block, error) {
	ret := _m.Called(from, to)

	var r0 []domain.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]domain.Block, error)); ok {
		return rf(from, to)
	}
	if rf, ok := ret.Get(0).(func(int, int) []domain.Block); ok {
		r0 = rf(from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNowBlockNumber provides a mock function with given fields:
func (_m *EthereumClient) GetNowBlockNumber() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEthereumClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewEthereumClient creates a new instance of EthereumClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEthereumClient(t mockConstructorTestingTNewEthereumClient) *EthereumClient {
	mock := &EthereumClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
